const express = require('express');
const mongoose = require('mongoose'); // Import mongoose for MongoDB connection
const cors = require('cors'); // Import CORS middleware
const app = express();
const PORT = 3002; // Explicitly set the port to 3002
const PDFDocument = require('pdfkit'); // Import PDF generation library

// Access the GitHub secret and MongoDB URI from environment variables
const mySecret = process.env['github_secret'];
const mongoURI = process.env['MONGODB_URI'] || 'mongodb://localhost:27017/splidDB';

// MongoDB connection
mongoose.connect(mongoURI, {
  useNewUrlParser: true,
  useUnifiedTopology: true
}).then(() => {
  console.log('Successfully connected to MongoDB');
}).catch(err => {
  console.error('Failed to connect to MongoDB', err);
  process.exit(1); // Exit if MongoDB connection fails
});

// Middleware to parse JSON
app.use(express.json());

// Conditional CORS setup for development or if NGINX is not handling CORS
if (process.env.NODE_ENV === 'development' || process.env.CORS_ENABLED === 'true') {
  console.log('CORS is enabled in the Node.js app');
  app.use(cors({
    origin: 'https://srinevasan.com', // Allow only requests from this origin
    methods: ['GET', 'POST', 'OPTIONS'], // Specify allowed methods
    allowedHeaders: ['Content-Type', 'Authorization'], // Specify allowed headers
    credentials: true // Allow credentials to be sent if necessary
  }));
}

// Routes
const participantRoute = require('./routes/participant'); // Updated to match the singular naming
app.use('/participants', participantRoute);

const expenseRoute = require('./routes/expense'); // Updated to match the singular naming
app.use('/expenses', expenseRoute);

const sessionRoute = require('./routes/session'); // Updated to match the singular naming
app.use('/sessions', sessionRoute);

// Health check route to verify server is running
app.get('/health', (req, res) => {
  res.status(200).json({ message: 'API is up and running' });
});

// Basic route
app.get('/', (req, res) => {
  res.send('Welcome to the Splid API');
});

// Test route to check if the secret is being retrieved correctly
app.get('/test-secret', (req, res) => {
  if (mySecret) {
    res.send(`GitHub Secret: ${mySecret}`);
  } else {
    res.send('No GitHub secret found');
  }
});

// Route to generate and return a sample PDF for testing
app.get('/generate-sample-pdf', (req, res) => {
  const doc = new PDFDocument();
  res.setHeader('Content-Type', 'application/pdf');
  doc.pipe(res);
  doc.text('Hello! This is a test PDF generated by PDFKit.');
  doc.end();
});

// Start the server and log startup status
app.listen(PORT, '0.0.0.0', () => {
  console.log(`Server is running on http://0.0.0.0:${PORT}`);
}).on('error', (err) => {
  console.error('Failed to start server:', err);
  process.exit(1); // Exit if the server fails to start
});
